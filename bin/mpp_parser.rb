#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

    require_relative 'mpp_lexer.rb'
    require_relative 'term_eval.rb'
    require_relative 'simple_operation_eval.rb'
    require_relative 'variable_eval.rb'
    require_relative 'function_eval.rb'
    require_relative 'return_statement_eval.rb'
    require_relative 'statement_list_eval.rb'
    require_relative 'comparison_operation_eval.rb'
    require_relative 'if_statement_eval.rb'
    require_relative 'arguments_eval.rb'

class MPP < Racc::Parser

module_eval(<<'...end mpp_parser.y/module_eval...', 'mpp_parser.y', 191)
  #methods can be defined here...
...end mpp_parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     4,    24,    70,    25,    14,    48,    34,    35,     8,     9,
    10,    11,    47,    23,    36,    37,    24,    12,    25,    87,
    88,    34,    35,    84,    85,    86,    18,    78,    79,     8,
     9,    10,    11,     8,     9,    10,    11,     8,     9,    10,
    11,    18,    87,    88,     8,     9,    10,    11,    24,   102,
    25,    72,    16,    34,    35,    24,    18,    25,    87,    88,
    34,    35,    24,    19,    25,    45,    21,    34,    35,    18,
    78,    79,    67,    18,    78,    79,     8,     9,    10,    11,
    18,    68,    69,     8,     9,    10,    11,    18,    51,    73,
     8,     9,    10,    11,    24,    42,    25,    48,    54,    34,
    35,    24,    20,    25,    87,    88,    34,    35,     8,     9,
    10,    11,    64,    65,    36,    37,    18,    78,    79,    18,
    78,    79,     8,     9,    10,    11,    18,    51,   nil,     8,
     9,    10,    11,    51,    84,    85,    86,    54,    56,    57,
    84,    85,    86,    54,    56,    57,     8,     9,    10,    11,
   nil,    64,    65,    36,    37,    18,    51,    64,    65,    36,
    37,    18,    51,    87,    88,   nil,    54,    56,    57,    87,
    88,   nil,    54,    56,    57,     8,     9,    10,    11,   nil,
    64,    65,    36,    37,    18,    51,    64,    65,    36,    37,
    18,    51,    98,    99,   nil,    54,    56,    57,    78,    79,
   nil,    54,    56,    57,    78,    79,   nil,   nil,   nil,    64,
    65,    36,    37,    18,    51,    64,    65,    36,    37,    18,
    51,   nil,   nil,   nil,    54,    56,    57,   nil,   nil,   nil,
    54,    56,    57,   nil,   nil,   nil,   nil,   nil,    64,    65,
    36,    37,    18,    51,    64,    65,    36,    37,    18,    51,
   nil,   nil,   nil,    54,    56,    57,   nil,   nil,   nil,    54,
    56,    57,   nil,   nil,   nil,   nil,   nil,    64,    65,    36,
    37,    18,    51,    64,    65,    36,    37,    18,    51,   nil,
   nil,   nil,    54,    56,    57,   nil,   nil,   nil,    54,    56,
    57,   nil,   nil,   nil,   nil,   nil,    64,    65,    36,    37,
    18,    51,    64,    65,    36,    37,    18,    51,   nil,   nil,
   nil,    54,    56,    57,   nil,   nil,   nil,    54,    56,    57,
   nil,   nil,   nil,   nil,   nil,    64,    65,    36,    37,    18,
    51,    64,    65,    36,    37,    18,    51,   nil,   nil,   nil,
    54,    56,    57,   nil,   nil,   nil,    54,    56,    57,   nil,
   nil,   nil,   nil,   nil,    64,    65,    36,    37,    18,    51,
    64,    65,    36,    37,    18,    51,   nil,   nil,   nil,    54,
    56,    57,   nil,   nil,   nil,    54,    56,    57,   nil,   nil,
   nil,   nil,   nil,    64,    65,    36,    37,    18,    51,    64,
    65,    36,    37,    18,    51,   nil,   nil,   nil,    54,    56,
    57,   nil,   nil,   nil,    54,    56,    57,   nil,   nil,   nil,
   nil,   nil,    64,    65,    36,    37,    18,    51,    64,    65,
    36,    37,    18,    51,   nil,   nil,   nil,    54,    56,    57,
   nil,   nil,   nil,    54,    56,    57,   nil,   nil,   nil,   nil,
   nil,    64,    65,    36,    37,    18,   nil,    64,    65,    36,
    37,    18,    87,    88,   nil,   nil,   nil,    89,    90,    91,
    92,    93,    94 ]

racc_action_check = [
     0,    41,    41,    41,     2,    33,    41,    41,    13,    13,
    13,    13,    33,    17,    19,    19,    17,     1,    17,   111,
   111,    17,    17,    59,    59,    59,    41,    74,    74,    41,
    41,    41,    41,     0,     0,     0,     0,     2,     2,     2,
     2,    17,   110,   110,    17,    17,    17,    17,    44,    80,
    44,    44,     4,    44,    44,    49,     6,    49,   113,   113,
    49,    49,    25,     7,    25,    25,    14,    25,    25,    32,
    80,    80,    38,    44,    49,    49,    44,    44,    44,    44,
    49,    39,    39,    49,    49,    49,    49,    25,    54,    46,
    25,    25,    25,    25,    24,    24,    24,    50,    54,    24,
    24,    68,    12,    68,   109,   109,    68,    68,    69,    69,
    69,    69,    54,    54,    54,    54,    54,    75,    75,    24,
    97,    97,    24,    24,    24,    24,    68,    88,   nil,    68,
    68,    68,    68,    89,   106,   106,   106,    88,    88,    88,
   107,   107,   107,    89,    89,    89,    23,    23,    23,    23,
   nil,    88,    88,    88,    88,    88,    87,    89,    89,    89,
    89,    89,    86,   108,   108,   nil,    87,    87,    87,   112,
   112,   nil,    86,    86,    86,     3,     3,     3,     3,   nil,
    87,    87,    87,    87,    87,    90,    86,    86,    86,    86,
    86,    91,    76,    76,   nil,    90,    90,    90,    66,    66,
   nil,    91,    91,    91,   114,   114,   nil,   nil,   nil,    90,
    90,    90,    90,    90,    85,    91,    91,    91,    91,    91,
    92,   nil,   nil,   nil,    85,    85,    85,   nil,   nil,   nil,
    92,    92,    92,   nil,   nil,   nil,   nil,   nil,    85,    85,
    85,    85,    85,    34,    92,    92,    92,    92,    92,    35,
   nil,   nil,   nil,    34,    34,    34,   nil,   nil,   nil,    35,
    35,    35,   nil,   nil,   nil,   nil,   nil,    34,    34,    34,
    34,    34,    84,    35,    35,    35,    35,    35,    79,   nil,
   nil,   nil,    84,    84,    84,   nil,   nil,   nil,    79,    79,
    79,   nil,   nil,   nil,   nil,   nil,    84,    84,    84,    84,
    84,    57,    79,    79,    79,    79,    79,    94,   nil,   nil,
   nil,    57,    57,    57,   nil,   nil,   nil,    94,    94,    94,
   nil,   nil,   nil,   nil,   nil,    57,    57,    57,    57,    57,
    78,    94,    94,    94,    94,    94,    47,   nil,   nil,   nil,
    78,    78,    78,   nil,   nil,   nil,    47,    47,    47,   nil,
   nil,   nil,   nil,   nil,    78,    78,    78,    78,    78,    48,
    47,    47,    47,    47,    47,    99,   nil,   nil,   nil,    48,
    48,    48,   nil,   nil,   nil,    99,    99,    99,   nil,   nil,
   nil,   nil,   nil,    48,    48,    48,    48,    48,    73,    99,
    99,    99,    99,    99,    51,   nil,   nil,   nil,    73,    73,
    73,   nil,   nil,   nil,    51,    51,    51,   nil,   nil,   nil,
   nil,   nil,    73,    73,    73,    73,    73,    56,    51,    51,
    51,    51,    51,    93,   nil,   nil,   nil,    56,    56,    56,
   nil,   nil,   nil,    93,    93,    93,   nil,   nil,   nil,   nil,
   nil,    56,    56,    56,    56,    56,   nil,    93,    93,    93,
    93,    93,    61,    61,   nil,   nil,   nil,    61,    61,    61,
    61,    61,    61 ]

racc_action_pointer = [
    -2,    17,     2,   140,    49,   nil,    24,    30,   nil,   nil,
   nil,   nil,   102,   -27,    63,   nil,   nil,     9,   nil,   -16,
   nil,   nil,   nil,   111,    87,    55,   nil,   nil,   nil,   nil,
   nil,   nil,    37,     1,   239,   245,   nil,   nil,    38,    76,
   nil,    -6,   nil,   nil,    41,   nil,    78,   332,   355,    48,
    93,   390,   nil,   nil,    84,   nil,   413,   297,   nil,     6,
   nil,   437,   nil,   nil,   nil,   nil,   172,   nil,    94,    73,
   nil,   nil,   nil,   384,     1,    91,   187,   nil,   326,   274,
    44,   nil,   nil,   nil,   268,   210,   158,   152,   123,   129,
   181,   187,   216,   419,   303,   nil,   nil,    94,   nil,   361,
   nil,   nil,   nil,   nil,   nil,   nil,   117,   123,   148,    89,
    27,     4,   154,    43,   178 ]

racc_action_default = [
    -4,   -72,    -1,    -2,   -72,    -7,   -72,   -66,   -68,   -69,
   -70,   -71,   -72,    -3,   -72,    -8,    -5,   -72,   -65,   -72,
   115,    -6,    -9,   -72,   -72,   -72,   -19,   -20,   -21,   -22,
   -23,   -24,   -72,   -72,   -72,   -72,   -63,   -64,   -72,   -72,
   -11,   -72,   -15,   -17,   -72,   -16,   -25,   -72,   -59,   -72,
   -30,   -72,   -32,   -33,   -72,   -35,   -72,   -72,   -38,   -45,
   -42,   -52,   -55,   -60,   -61,   -62,   -29,   -67,   -72,   -72,
   -13,   -18,   -14,   -72,   -27,   -58,   -72,   -28,   -72,   -72,
   -72,   -34,   -36,   -37,   -72,   -72,   -72,   -72,   -72,   -72,
   -72,   -72,   -72,   -72,   -72,   -10,   -12,   -26,   -56,   -72,
   -53,   -54,   -31,   -39,   -40,   -41,   -43,   -44,   -46,   -47,
   -48,   -49,   -50,   -51,   -57 ]

racc_goto_table = [
    49,    66,    31,    22,    40,    17,   106,   107,    15,    31,
    31,   100,   101,    74,    75,     1,    33,    80,    15,     3,
    81,    13,    39,    33,    33,     2,    31,    71,    76,    31,
    71,    46,    82,    83,    31,    77,    41,    44,    38,    97,
    33,   nil,     6,    33,     6,     6,   nil,   nil,    33,   nil,
    96,   nil,   nil,    31,    95,     6,   nil,   nil,   nil,   nil,
   103,   104,   105,   nil,   nil,   114,   nil,    33,   108,   109,
   110,   111,   112,   113 ]

racc_goto_check = [
    16,    16,    15,     7,     9,     6,    21,    21,     4,    15,
    15,    23,    23,    16,    16,     1,     6,    16,     4,     3,
    19,     3,     8,     6,     6,     2,    15,     7,    24,    15,
     7,     6,    20,    20,    15,     7,    11,    11,    25,    16,
     6,   nil,     5,     6,     5,     5,   nil,   nil,     6,   nil,
     9,   nil,   nil,    15,     7,     5,   nil,   nil,   nil,   nil,
    20,    20,    20,   nil,   nil,    16,   nil,     6,    22,    22,
    22,    22,    22,    22 ]

racc_goto_pointer = [
   nil,    15,    25,    19,     5,    42,    -1,   -14,    -1,   -19,
   nil,    12,   nil,   nil,   nil,   -15,   -34,   nil,   nil,   -34,
   -24,   -81,   -21,   -67,   -20,    19,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,    32,    50,    43,   nil,    27,
    26,   nil,    28,    29,    30,    52,   nil,    55,    53,    58,
    60,    59,    61,    62,   nil,    63,     7 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  2, 40, :_reduce_none,
  0, 40, :_reduce_none,
  2, 41, :_reduce_5,
  3, 41, :_reduce_none,
  1, 42, :_reduce_7,
  2, 42, :_reduce_8,
  3, 43, :_reduce_9,
  6, 43, :_reduce_10,
  1, 47, :_reduce_11,
  3, 47, :_reduce_12,
  3, 49, :_reduce_13,
  3, 49, :_reduce_14,
  2, 49, :_reduce_15,
  2, 49, :_reduce_16,
  1, 50, :_reduce_17,
  2, 50, :_reduce_18,
  1, 46, :_reduce_none,
  1, 46, :_reduce_none,
  1, 46, :_reduce_none,
  1, 46, :_reduce_none,
  1, 46, :_reduce_none,
  1, 46, :_reduce_none,
  2, 48, :_reduce_25,
  4, 48, :_reduce_26,
  3, 51, :_reduce_27,
  3, 52, :_reduce_28,
  2, 53, :_reduce_29,
  1, 56, :_reduce_30,
  3, 56, :_reduce_31,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  2, 58, :_reduce_34,
  1, 58, :_reduce_none,
  2, 59, :_reduce_36,
  2, 59, :_reduce_37,
  1, 59, :_reduce_none,
  3, 60, :_reduce_39,
  3, 60, :_reduce_40,
  3, 60, :_reduce_41,
  1, 60, :_reduce_none,
  3, 61, :_reduce_43,
  3, 61, :_reduce_44,
  1, 61, :_reduce_none,
  3, 62, :_reduce_46,
  3, 62, :_reduce_47,
  3, 62, :_reduce_48,
  3, 62, :_reduce_49,
  3, 62, :_reduce_none,
  3, 62, :_reduce_none,
  1, 62, :_reduce_none,
  3, 55, :_reduce_none,
  3, 55, :_reduce_none,
  1, 55, :_reduce_none,
  4, 54, :_reduce_56,
  3, 63, :_reduce_57,
  1, 63, :_reduce_58,
  0, 63, :_reduce_none,
  1, 57, :_reduce_none,
  1, 57, :_reduce_61,
  1, 57, :_reduce_62,
  1, 64, :_reduce_63,
  1, 64, :_reduce_64,
  1, 45, :_reduce_none,
  1, 44, :_reduce_none,
  4, 44, :_reduce_none,
  1, 65, :_reduce_none,
  1, 65, :_reduce_none,
  1, 65, :_reduce_none,
  1, 65, :_reduce_none ]

racc_reduce_n = 72

racc_shift_n = 115

racc_token_table = {
  false => 0,
  :error => 1,
  :REQUIRE => 2,
  :STRING => 3,
  "(" => 4,
  ")" => 5,
  "," => 6,
  :DO => 7,
  :END => 8,
  "{" => 9,
  "}" => 10,
  "=" => 11,
  :IF => 12,
  :RETURN => 13,
  "!" => 14,
  "+" => 15,
  "-" => 16,
  "*" => 17,
  "/" => 18,
  "%" => 19,
  :EQUAL => 20,
  :NOT_EQUAL => 21,
  :LT => 22,
  :GT => 23,
  :LTE => 24,
  :GTE => 25,
  :AND => 26,
  :OR => 27,
  :TRUE => 28,
  :FALSE => 29,
  :DECIMAL => 30,
  :HEX => 31,
  :IDENT => 32,
  "[" => 33,
  "]" => 34,
  :INT => 35,
  :UINT => 36,
  :BOOL => 37,
  :DEF => 38 }

racc_nt_base = 39

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "REQUIRE",
  "STRING",
  "\"(\"",
  "\")\"",
  "\",\"",
  "DO",
  "END",
  "\"{\"",
  "\"}\"",
  "\"=\"",
  "IF",
  "RETURN",
  "\"!\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "EQUAL",
  "NOT_EQUAL",
  "LT",
  "GT",
  "LTE",
  "GTE",
  "AND",
  "OR",
  "TRUE",
  "FALSE",
  "DECIMAL",
  "HEX",
  "IDENT",
  "\"[\"",
  "\"]\"",
  "INT",
  "UINT",
  "BOOL",
  "DEF",
  "$start",
  "target",
  "require_list",
  "function_list",
  "function",
  "type",
  "ident",
  "statement",
  "arguments",
  "variable_declare",
  "code_block",
  "statement_list",
  "variable_set",
  "if_statement",
  "return_statement",
  "function_call",
  "expression",
  "term",
  "constant",
  "negation",
  "unary",
  "mult",
  "add",
  "relation",
  "params",
  "numeric_constant",
  "typedef" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

module_eval(<<'.,.,', 'mpp_parser.y', 13)
  def _reduce_5(val, _values, result)
                 puts "ERROR: requires not yet supported."
             exit
           
    result
  end
.,.,

# reduce 6 omitted

module_eval(<<'.,.,', 'mpp_parser.y', 20)
  def _reduce_7(val, _values, result)
     result = FunctionListEval.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 23)
  def _reduce_8(val, _values, result)
                val[0].add_member val[1]
            result = val[0]
          
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 29)
  def _reduce_9(val, _values, result)
     result = FunctionEval.new(val[0], val[1], Evaluator.new, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 30)
  def _reduce_10(val, _values, result)
     result = FunctionEval.new(val[0], val[1], val[3], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 34)
  def _reduce_11(val, _values, result)
     result = ArgumentListEval.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 37)
  def _reduce_12(val, _values, result)
                val[0].add_member val[2]
            result = val[0]
          
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 43)
  def _reduce_13(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 44)
  def _reduce_14(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 45)
  def _reduce_15(val, _values, result)
     result = Evaluator.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 46)
  def _reduce_16(val, _values, result)
     result = Evaluator.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 50)
  def _reduce_17(val, _values, result)
     result = StatementListEval.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 53)
  def _reduce_18(val, _values, result)
                val[0].add_member val[1]
            result = val[0]
          
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

module_eval(<<'.,.,', 'mpp_parser.y', 68)
  def _reduce_25(val, _values, result)
     result = DefineVariableEval.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 71)
  def _reduce_26(val, _values, result)
                var = DefineVariableEval.new(val[0], val[1])
            result = SetVariableEval.new(var, val[3])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 79)
  def _reduce_27(val, _values, result)
                var = GetVariableEval.new(val[0])
            result = SetVariableEval.new(var, val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 85)
  def _reduce_28(val, _values, result)
     result = IfStatementEval.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 89)
  def _reduce_29(val, _values, result)
     result = ReturnStatementEval.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 93)
  def _reduce_30(val, _values, result)
     result = GetVariableEval.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 94)
  def _reduce_31(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

module_eval(<<'.,.,', 'mpp_parser.y', 100)
  def _reduce_34(val, _values, result)
     result = SingleOperationEval.new(val[1], :negation) 
    result
  end
.,.,

# reduce 35 omitted

module_eval(<<'.,.,', 'mpp_parser.y', 105)
  def _reduce_36(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 106)
  def _reduce_37(val, _values, result)
     result = SingleOperationEval.new(val[1], :unary) 
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'mpp_parser.y', 111)
  def _reduce_39(val, _values, result)
     result = SimpleOperationEval.new(val[0], val[2], :mul) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 112)
  def _reduce_40(val, _values, result)
     result = SimpleOperationEval.new(val[0], val[2], :div) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 113)
  def _reduce_41(val, _values, result)
     result = SimpleOperationEval.new(val[0], val[2], :mod) 
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'mpp_parser.y', 118)
  def _reduce_43(val, _values, result)
     result = SimpleOperationEval.new(val[0], val[2], :add) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 119)
  def _reduce_44(val, _values, result)
     result = SimpleOperationEval.new(val[0], val[2], :sub) 
    result
  end
.,.,

# reduce 45 omitted

module_eval(<<'.,.,', 'mpp_parser.y', 124)
  def _reduce_46(val, _values, result)
     result = ComparisonOperationEval.new(val[0], val[2], :equal) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 125)
  def _reduce_47(val, _values, result)
     result = ComparisonOperationEval.new(val[0], val[2], :not_equal) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 126)
  def _reduce_48(val, _values, result)
     result = ComparisonOperationEval.new(val[0], val[2], :lt) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 127)
  def _reduce_49(val, _values, result)
     result = ComparisonOperationEval.new(val[0], val[2], :gt) 
    result
  end
.,.,

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

module_eval(<<'.,.,', 'mpp_parser.y', 140)
  def _reduce_56(val, _values, result)
     result = FunctionCallEval.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 144)
  def _reduce_57(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 145)
  def _reduce_58(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

# reduce 59 omitted

# reduce 60 omitted

module_eval(<<'.,.,', 'mpp_parser.y', 151)
  def _reduce_61(val, _values, result)
     result = LiteralEval.new(:bool, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 152)
  def _reduce_62(val, _values, result)
     result = LiteralEval.new(:bool, false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 156)
  def _reduce_63(val, _values, result)
     result = LiteralEval.new(:int, val[0].to_i) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 157)
  def _reduce_64(val, _values, result)
     result = LiteralEval.new(:int, val[0].hex) 
    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class MPP
