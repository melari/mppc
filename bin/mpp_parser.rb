#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

    require_relative 'mpp_lexer.rb'
    require_relative 'term_eval.rb'
    require_relative 'simple_operation_eval.rb'
    require_relative 'variable_eval.rb'
    require_relative 'function_eval.rb'
    require_relative 'return_statement_eval.rb'
    require_relative 'statement_list_eval.rb'
    require_relative 'comparison_operation_eval.rb'
    require_relative 'if_statement_eval.rb'
    require_relative 'arguments_eval.rb'

class MPP < Racc::Parser

module_eval(<<'...end mpp_parser.y/module_eval...', 'mpp_parser.y', 183)
  #methods can be defined here...
...end mpp_parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     4,    22,    65,    23,    13,    43,    32,    33,    79,    80,
    81,    21,    42,    11,    22,    15,    23,    73,    74,    32,
    33,     7,     8,     9,    10,    17,    17,     7,     8,     9,
    10,     7,     8,     9,    10,     7,     8,     9,    10,    17,
     7,     8,     9,    10,    22,    18,    23,    67,    19,    32,
    33,     7,     8,     9,    10,    22,    97,    23,    73,    74,
    32,    33,    22,    43,    23,    40,    17,    32,    33,    17,
     7,     8,     9,    10,    73,    74,    68,    73,    74,   nil,
    17,     7,     8,     9,    10,    46,   nil,    17,     7,     8,
     9,    10,    22,    37,    23,    49,   nil,    32,    33,    22,
   nil,    23,    82,    83,    32,    33,    79,    80,    81,    58,
    59,    60,    61,    17,    79,    80,    81,    17,     7,     8,
     9,    10,    46,   nil,    17,     7,     8,     9,    10,    46,
    82,    83,    49,    51,    52,     7,     8,     9,    10,    49,
    51,    52,     7,     8,     9,    10,    58,    59,    60,    61,
    17,    46,   nil,    58,    59,    60,    61,    17,    46,    82,
    83,    49,    51,    52,    63,    64,    82,    83,    49,    51,
    52,    82,    83,    82,    83,    58,    59,    60,    61,    17,
    46,   nil,    58,    59,    60,    61,    17,    46,    93,    94,
    49,    51,    52,    73,    74,    73,    74,    49,    51,    52,
    73,    74,   nil,   nil,    58,    59,    60,    61,    17,    46,
   nil,    58,    59,    60,    61,    17,    46,   nil,   nil,    49,
    51,    52,   nil,   nil,   nil,   nil,    49,    51,    52,   nil,
   nil,   nil,   nil,    58,    59,    60,    61,    17,    46,   nil,
    58,    59,    60,    61,    17,    46,   nil,   nil,    49,    51,
    52,   nil,   nil,   nil,   nil,    49,    51,    52,   nil,   nil,
   nil,   nil,    58,    59,    60,    61,    17,    46,   nil,    58,
    59,    60,    61,    17,    46,   nil,   nil,    49,    51,    52,
   nil,   nil,   nil,   nil,    49,    51,    52,   nil,   nil,   nil,
   nil,    58,    59,    60,    61,    17,    46,   nil,    58,    59,
    60,    61,    17,    46,   nil,   nil,    49,    51,    52,   nil,
   nil,   nil,   nil,    49,    51,    52,   nil,   nil,   nil,   nil,
    58,    59,    60,    61,    17,    46,   nil,    58,    59,    60,
    61,    17,    46,   nil,   nil,    49,    51,    52,   nil,   nil,
   nil,   nil,    49,    51,    52,   nil,   nil,   nil,   nil,    58,
    59,    60,    61,    17,    46,   nil,    58,    59,    60,    61,
    17,    46,   nil,   nil,    49,    51,    52,   nil,   nil,   nil,
   nil,    49,    51,    52,   nil,   nil,   nil,   nil,    58,    59,
    60,    61,    17,    46,   nil,    58,    59,    60,    61,    17,
    46,   nil,   nil,    49,    51,    52,   nil,   nil,   nil,   nil,
    49,    51,    52,   nil,   nil,   nil,   nil,    58,    59,    60,
    61,    17,    46,   nil,    58,    59,    60,    61,    17,    46,
   nil,   nil,    49,    51,    52,   nil,   nil,   nil,   nil,    49,
    51,    52,   nil,   nil,   nil,   nil,    58,    59,    60,    61,
    17,   nil,   nil,    58,    59,    60,    61,    17,    82,    83,
   nil,   nil,   nil,    84,    85,    86,    87,    88,    89 ]

racc_action_check = [
     0,    36,    36,    36,     2,    31,    36,    36,    54,    54,
    54,    16,    31,     1,    16,     4,    16,    62,    62,    16,
    16,     3,     3,     3,     3,     6,    36,    36,    36,    36,
    36,     0,     0,     0,     0,     2,     2,     2,     2,    16,
    16,    16,    16,    16,    39,    11,    39,    39,    13,    39,
    39,    12,    12,    12,    12,    44,    75,    44,   109,   109,
    44,    44,    23,    45,    23,    23,    30,    23,    23,    39,
    39,    39,    39,    39,    44,    44,    41,    75,    75,   nil,
    44,    44,    44,    44,    44,    49,   nil,    23,    23,    23,
    23,    23,    22,    22,    22,    49,   nil,    22,    22,    63,
   nil,    63,   108,   108,    63,    63,   102,   102,   102,    49,
    49,    49,    49,    49,   101,   101,   101,    22,    22,    22,
    22,    22,    84,   nil,    63,    63,    63,    63,    63,    83,
   107,   107,    84,    84,    84,    64,    64,    64,    64,    83,
    83,    83,    21,    21,    21,    21,    84,    84,    84,    84,
    84,    85,   nil,    83,    83,    83,    83,    83,    86,   106,
   106,    85,    85,    85,    34,    34,   105,   105,    86,    86,
    86,   104,   104,   103,   103,    85,    85,    85,    85,    85,
    82,   nil,    86,    86,    86,    86,    86,    81,    71,    71,
    82,    82,    82,    92,    92,    69,    69,    81,    81,    81,
    70,    70,   nil,   nil,    82,    82,    82,    82,    82,    87,
   nil,    81,    81,    81,    81,    81,    33,   nil,   nil,    87,
    87,    87,   nil,   nil,   nil,   nil,    33,    33,    33,   nil,
   nil,   nil,   nil,    87,    87,    87,    87,    87,    80,   nil,
    33,    33,    33,    33,    33,    88,   nil,   nil,    80,    80,
    80,   nil,   nil,   nil,   nil,    88,    88,    88,   nil,   nil,
   nil,   nil,    80,    80,    80,    80,    80,    89,   nil,    88,
    88,    88,    88,    88,    79,   nil,   nil,    89,    89,    89,
   nil,   nil,   nil,   nil,    79,    79,    79,   nil,   nil,   nil,
   nil,    89,    89,    89,    89,    89,    42,   nil,    79,    79,
    79,    79,    79,    43,   nil,   nil,    42,    42,    42,   nil,
   nil,   nil,   nil,    43,    43,    43,   nil,   nil,   nil,   nil,
    42,    42,    42,    42,    42,    94,   nil,    43,    43,    43,
    43,    43,    74,   nil,   nil,    94,    94,    94,   nil,   nil,
   nil,   nil,    74,    74,    74,   nil,   nil,   nil,   nil,    94,
    94,    94,    94,    94,    46,   nil,    74,    74,    74,    74,
    74,    51,   nil,   nil,    46,    46,    46,   nil,   nil,   nil,
   nil,    51,    51,    51,   nil,   nil,   nil,   nil,    46,    46,
    46,    46,    46,    52,   nil,    51,    51,    51,    51,    51,
    73,   nil,   nil,    52,    52,    52,   nil,   nil,   nil,   nil,
    73,    73,    73,   nil,   nil,   nil,   nil,    52,    52,    52,
    52,    52,    68,   nil,    73,    73,    73,    73,    73,    32,
   nil,   nil,    68,    68,    68,   nil,   nil,   nil,   nil,    32,
    32,    32,   nil,   nil,   nil,   nil,    68,    68,    68,    68,
    68,   nil,   nil,    32,    32,    32,    32,    32,    56,    56,
   nil,   nil,   nil,    56,    56,    56,    56,    56,    56 ]

racc_action_pointer = [
    -2,    13,     2,   -12,    12,   nil,    -7,   nil,   nil,   nil,
   nil,    45,    18,    45,   nil,   nil,     7,   nil,   nil,   nil,
   nil,   109,    85,    55,   nil,   nil,   nil,   nil,   nil,   nil,
    34,     1,   415,   212,   159,   nil,    -6,   nil,   nil,    37,
   nil,    65,   292,   299,    48,    59,   350,   nil,   nil,    81,
   nil,   357,   379,   nil,    -9,   nil,   433,   nil,   nil,   nil,
   nil,   nil,    -9,    92,   102,   nil,   nil,   nil,   408,   169,
   174,   183,   nil,   386,   328,    51,   nil,   nil,   nil,   270,
   234,   183,   176,   125,   118,   147,   154,   205,   241,   263,
   nil,   nil,   167,   nil,   321,   nil,   nil,   nil,   nil,   nil,
   nil,    97,    89,   158,   156,   151,   144,   115,    87,    32 ]

racc_action_default = [
    -4,   -69,    -1,    -2,   -69,    -7,   -69,   -65,   -66,   -67,
   -68,   -69,    -3,   -69,    -8,    -5,   -69,   -64,   110,    -6,
    -9,   -69,   -69,   -69,   -19,   -20,   -21,   -22,   -23,   -24,
   -69,   -69,   -69,   -69,   -69,   -11,   -69,   -15,   -17,   -69,
   -16,   -25,   -69,   -59,   -69,   -30,   -69,   -32,   -33,   -69,
   -35,   -69,   -69,   -38,   -45,   -42,   -52,   -55,   -60,   -61,
   -62,   -63,   -29,   -69,   -69,   -13,   -18,   -14,   -69,   -27,
   -58,   -69,   -28,   -69,   -69,   -69,   -34,   -36,   -37,   -69,
   -69,   -69,   -69,   -69,   -69,   -69,   -69,   -69,   -69,   -69,
   -10,   -12,   -26,   -56,   -69,   -53,   -54,   -31,   -39,   -40,
   -41,   -43,   -44,   -46,   -47,   -48,   -49,   -50,   -51,   -57 ]

racc_goto_table = [
    44,    62,    16,    35,     6,     1,     6,     6,    14,    76,
    69,    70,    31,     3,    75,    12,     6,    14,    31,    31,
    34,    29,    20,    77,    78,     2,    41,    29,    29,   101,
   102,    71,    31,    95,    96,    31,    92,    36,    39,   nil,
    31,    29,    66,   nil,    29,    66,    91,   nil,   nil,    29,
    72,    98,    99,   100,   nil,   nil,   nil,   nil,   nil,    31,
   nil,   nil,   109,   nil,   nil,   nil,   nil,   nil,    29,    90,
   103,   104,   105,   106,   107,   108 ]

racc_goto_check = [
    16,    16,     6,     9,     5,     1,     5,     5,     4,    19,
    16,    16,     6,     3,    16,     3,     5,     4,     6,     6,
     8,    15,     7,    20,    20,     2,     6,    15,    15,    21,
    21,    24,     6,    23,    23,     6,    16,    11,    11,   nil,
     6,    15,     7,   nil,    15,     7,     9,   nil,   nil,    15,
     7,    20,    20,    20,   nil,   nil,   nil,   nil,   nil,     6,
   nil,   nil,    16,   nil,   nil,   nil,   nil,   nil,    15,     7,
    22,    22,    22,    22,    22,    22 ]

racc_goto_pointer = [
   nil,     5,    25,    13,     5,     4,    -4,     6,    -1,   -18,
   nil,    15,   nil,   nil,   nil,     5,   -32,   nil,   nil,   -40,
   -28,   -53,   -14,   -40,   -12 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,    30,    45,    38,   nil,    25,
    24,   nil,    26,    27,    28,    47,   nil,    50,    48,    53,
    55,    54,    56,    57,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  2, 38, :_reduce_none,
  0, 38, :_reduce_none,
  2, 39, :_reduce_5,
  3, 39, :_reduce_none,
  1, 40, :_reduce_7,
  2, 40, :_reduce_8,
  3, 41, :_reduce_9,
  6, 41, :_reduce_10,
  1, 45, :_reduce_11,
  3, 45, :_reduce_12,
  3, 47, :_reduce_13,
  3, 47, :_reduce_14,
  2, 47, :_reduce_15,
  2, 47, :_reduce_16,
  1, 48, :_reduce_17,
  2, 48, :_reduce_18,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  2, 46, :_reduce_25,
  4, 46, :_reduce_26,
  3, 49, :_reduce_27,
  3, 50, :_reduce_28,
  2, 51, :_reduce_29,
  1, 54, :_reduce_30,
  3, 54, :_reduce_31,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  2, 56, :_reduce_34,
  1, 56, :_reduce_none,
  2, 57, :_reduce_36,
  2, 57, :_reduce_37,
  1, 57, :_reduce_none,
  3, 58, :_reduce_39,
  3, 58, :_reduce_40,
  3, 58, :_reduce_41,
  1, 58, :_reduce_none,
  3, 59, :_reduce_43,
  3, 59, :_reduce_44,
  1, 59, :_reduce_none,
  3, 60, :_reduce_46,
  3, 60, :_reduce_47,
  3, 60, :_reduce_48,
  3, 60, :_reduce_49,
  3, 60, :_reduce_none,
  3, 60, :_reduce_none,
  1, 60, :_reduce_none,
  3, 53, :_reduce_none,
  3, 53, :_reduce_none,
  1, 53, :_reduce_none,
  4, 52, :_reduce_56,
  3, 61, :_reduce_none,
  1, 61, :_reduce_none,
  0, 61, :_reduce_none,
  1, 55, :_reduce_60,
  1, 55, :_reduce_61,
  1, 55, :_reduce_62,
  1, 55, :_reduce_63,
  1, 43, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none ]

racc_reduce_n = 69

racc_shift_n = 110

racc_token_table = {
  false => 0,
  :error => 1,
  :REQUIRE => 2,
  :STRING => 3,
  "(" => 4,
  ")" => 5,
  "," => 6,
  :DO => 7,
  :END => 8,
  "{" => 9,
  "}" => 10,
  "=" => 11,
  :IF => 12,
  :RETURN => 13,
  "!" => 14,
  "+" => 15,
  "-" => 16,
  "*" => 17,
  "/" => 18,
  "%" => 19,
  :EQUAL => 20,
  :NOT_EQUAL => 21,
  :LT => 22,
  :GT => 23,
  :LTE => 24,
  :GTE => 25,
  :AND => 26,
  :OR => 27,
  :DECIMAL => 28,
  :HEX => 29,
  :TRUE => 30,
  :FALSE => 31,
  :IDENT => 32,
  :INT => 33,
  :UINT => 34,
  :BOOL => 35,
  :DEF => 36 }

racc_nt_base = 37

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "REQUIRE",
  "STRING",
  "\"(\"",
  "\")\"",
  "\",\"",
  "DO",
  "END",
  "\"{\"",
  "\"}\"",
  "\"=\"",
  "IF",
  "RETURN",
  "\"!\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "EQUAL",
  "NOT_EQUAL",
  "LT",
  "GT",
  "LTE",
  "GTE",
  "AND",
  "OR",
  "DECIMAL",
  "HEX",
  "TRUE",
  "FALSE",
  "IDENT",
  "INT",
  "UINT",
  "BOOL",
  "DEF",
  "$start",
  "target",
  "require_list",
  "function_list",
  "function",
  "type",
  "ident",
  "statement",
  "arguments",
  "variable_declare",
  "code_block",
  "statement_list",
  "variable_set",
  "if_statement",
  "return_statement",
  "function_call",
  "expression",
  "term",
  "constant",
  "negation",
  "unary",
  "mult",
  "add",
  "relation",
  "params" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

module_eval(<<'.,.,', 'mpp_parser.y', 13)
  def _reduce_5(val, _values, result)
                 puts "ERROR: requires not yet supported."
             exit
           
    result
  end
.,.,

# reduce 6 omitted

module_eval(<<'.,.,', 'mpp_parser.y', 20)
  def _reduce_7(val, _values, result)
     result = FunctionListEval.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 23)
  def _reduce_8(val, _values, result)
                val[0].add_member val[1]
            result = val[0]
          
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 29)
  def _reduce_9(val, _values, result)
     result = FunctionEval.new(val[0], val[1], Evaluator.new, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 30)
  def _reduce_10(val, _values, result)
     result = FunctionEval.new(val[0], val[1], val[3], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 34)
  def _reduce_11(val, _values, result)
     result = ArgumentListEval.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 37)
  def _reduce_12(val, _values, result)
                val[0].add_member val[2]
            result = val[0]
          
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 43)
  def _reduce_13(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 44)
  def _reduce_14(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 45)
  def _reduce_15(val, _values, result)
     result = Evaluator.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 46)
  def _reduce_16(val, _values, result)
     result = Evaluator.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 50)
  def _reduce_17(val, _values, result)
     result = StatementListEval.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 53)
  def _reduce_18(val, _values, result)
                val[0].add_member val[1]
            result = val[0]
          
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

module_eval(<<'.,.,', 'mpp_parser.y', 68)
  def _reduce_25(val, _values, result)
     result = DefineVariableEval.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 71)
  def _reduce_26(val, _values, result)
                var = DefineVariableEval.new(val[0], val[1])
            result = SetVariableEval.new(var, val[3])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 79)
  def _reduce_27(val, _values, result)
                var = GetVariableEval.new(val[0])
            result = SetVariableEval.new(var, val[2])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 85)
  def _reduce_28(val, _values, result)
     result = IfStatementEval.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 89)
  def _reduce_29(val, _values, result)
     result = ReturnStatementEval.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 93)
  def _reduce_30(val, _values, result)
     result = GetVariableEval.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 94)
  def _reduce_31(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

module_eval(<<'.,.,', 'mpp_parser.y', 100)
  def _reduce_34(val, _values, result)
     result = SingleOperationEval.new(val[1], :negation) 
    result
  end
.,.,

# reduce 35 omitted

module_eval(<<'.,.,', 'mpp_parser.y', 105)
  def _reduce_36(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 106)
  def _reduce_37(val, _values, result)
     result = SingleOperationEval.new(val[1], :unary) 
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'mpp_parser.y', 111)
  def _reduce_39(val, _values, result)
     result = SimpleOperationEval.new(val[0], val[2], :mul) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 112)
  def _reduce_40(val, _values, result)
     result = SimpleOperationEval.new(val[0], val[2], :div) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 113)
  def _reduce_41(val, _values, result)
     result = SimpleOperationEval.new(val[0], val[2], :mod) 
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'mpp_parser.y', 118)
  def _reduce_43(val, _values, result)
     result = SimpleOperationEval.new(val[0], val[2], :add) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 119)
  def _reduce_44(val, _values, result)
     result = SimpleOperationEval.new(val[0], val[2], :sub) 
    result
  end
.,.,

# reduce 45 omitted

module_eval(<<'.,.,', 'mpp_parser.y', 124)
  def _reduce_46(val, _values, result)
     result = ComparisonOperationEval.new(val[0], val[2], :equal) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 125)
  def _reduce_47(val, _values, result)
     result = ComparisonOperationEval.new(val[0], val[2], :not_equal) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 126)
  def _reduce_48(val, _values, result)
     result = ComparisonOperationEval.new(val[0], val[2], :lt) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 127)
  def _reduce_49(val, _values, result)
     result = ComparisonOperationEval.new(val[0], val[2], :gt) 
    result
  end
.,.,

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

module_eval(<<'.,.,', 'mpp_parser.y', 140)
  def _reduce_56(val, _values, result)
     result = FunctionCallEval.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

module_eval(<<'.,.,', 'mpp_parser.y', 150)
  def _reduce_60(val, _values, result)
     result = LiteralEval.new(:int, val[0].to_i) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 151)
  def _reduce_61(val, _values, result)
     result = LiteralEval.new(:int, val[0].hex) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 152)
  def _reduce_62(val, _values, result)
     result = LiteralEval.new(:bool, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'mpp_parser.y', 153)
  def _reduce_63(val, _values, result)
     result = LiteralEval.new(:bool, false) 
    result
  end
.,.,

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class MPP
